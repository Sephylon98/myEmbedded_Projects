
Mohamed_Ashraf_Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000c7a  00000d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  00000d20  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001483  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000040ab  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000040dc  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00004118  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00004646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00004b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void){

	uint16 Distance = 0;

	/* Enable Global interrupt */
	SREG = 0x80;
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8f bf       	out	0x3f, r24	; 63

	/* Initialize LCD, Ultrasonic drivers */
	LCD_init();
  96:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_init>
	Ultrasonic_init();
  9a:	0e 94 40 03 	call	0x680	; 0x680 <Ultrasonic_init>

	/* Setting Up LCD Look */
	LCD_displayString("Distance = ");
  9e:	82 e6       	ldi	r24, 0x62	; 98
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_displayString>
	LCD_moveCursor(0,14);
  a6:	6e e0       	ldi	r22, 0x0E	; 14
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_moveCursor>
	LCD_displayString("cm");
  ae:	8e e6       	ldi	r24, 0x6E	; 110
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_displayString>

	while(1){

		Distance = Ultrasonic_readDistance();
  b6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Ultrasonic_readDistance>
  ba:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
  c6:	00 00       	nop
		_delay_ms(20);
		if(Distance<10){
  c8:	ca 30       	cpi	r28, 0x0A	; 10
  ca:	d1 05       	cpc	r29, r1
  cc:	70 f4       	brcc	.+28     	; 0xea <main+0x58>
			LCD_moveCursor(0,11);
  ce:	6b e0       	ldi	r22, 0x0B	; 11
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_moveCursor>
			LCD_intgerToString(Distance);
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_intgerToString>
			LCD_displayCharacter(' ');
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayCharacter>
			LCD_displayCharacter(' ');
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayCharacter>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <main+0x24>
		}
		else if(Distance>=10 && Distance <100){
  ea:	ce 01       	movw	r24, r28
  ec:	0a 97       	sbiw	r24, 0x0a	; 10
  ee:	8a 35       	cpi	r24, 0x5A	; 90
  f0:	91 05       	cpc	r25, r1
  f2:	58 f4       	brcc	.+22     	; 0x10a <main+0x78>
			LCD_moveCursor(0,11);
  f4:	6b e0       	ldi	r22, 0x0B	; 11
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_moveCursor>
			LCD_intgerToString(Distance);
  fc:	ce 01       	movw	r24, r28
  fe:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_intgerToString>
			LCD_displayCharacter(' ');
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayCharacter>
 108:	d6 cf       	rjmp	.-84     	; 0xb6 <main+0x24>
		}

		else if(Distance >=100){
 10a:	c4 36       	cpi	r28, 0x64	; 100
 10c:	d1 05       	cpc	r29, r1
 10e:	98 f2       	brcs	.-90     	; 0xb6 <main+0x24>
			LCD_moveCursor(0,11);
 110:	6b e0       	ldi	r22, 0x0B	; 11
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_moveCursor>
			LCD_intgerToString(Distance);
 118:	ce 01       	movw	r24, r28
 11a:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_intgerToString>
 11e:	cb cf       	rjmp	.-106    	; 0xb6 <main+0x24>

00000120 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 120:	68 30       	cpi	r22, 0x08	; 8
 122:	08 f0       	brcs	.+2      	; 0x126 <GPIO_setupPinDirection+0x6>
 124:	6f c0       	rjmp	.+222    	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	08 f0       	brcs	.+2      	; 0x12c <GPIO_setupPinDirection+0xc>
 12a:	6c c0       	rjmp	.+216    	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	01 f1       	breq	.+64     	; 0x170 <GPIO_setupPinDirection+0x50>
 130:	30 f0       	brcs	.+12     	; 0x13e <GPIO_setupPinDirection+0x1e>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	b1 f1       	breq	.+108    	; 0x1a2 <GPIO_setupPinDirection+0x82>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	09 f4       	brne	.+2      	; 0x13c <GPIO_setupPinDirection+0x1c>
 13a:	4c c0       	rjmp	.+152    	; 0x1d4 <GPIO_setupPinDirection+0xb4>
 13c:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	59 f4       	brne	.+22     	; 0x158 <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
 142:	2a b3       	in	r18, 0x1a	; 26
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <GPIO_setupPinDirection+0x2e>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <GPIO_setupPinDirection+0x2a>
 152:	82 2b       	or	r24, r18
 154:	8a bb       	out	0x1a, r24	; 26
 156:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <GPIO_setupPinDirection+0x44>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <GPIO_setupPinDirection+0x40>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	8a bb       	out	0x1a, r24	; 26
 16e:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	59 f4       	brne	.+22     	; 0x18a <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
 174:	27 b3       	in	r18, 0x17	; 23
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <GPIO_setupPinDirection+0x60>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <GPIO_setupPinDirection+0x5c>
 184:	82 2b       	or	r24, r18
 186:	87 bb       	out	0x17, r24	; 23
 188:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 18a:	27 b3       	in	r18, 0x17	; 23
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <GPIO_setupPinDirection+0x76>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <GPIO_setupPinDirection+0x72>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	87 bb       	out	0x17, r24	; 23
 1a0:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
 1a6:	24 b3       	in	r18, 0x14	; 20
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <GPIO_setupPinDirection+0x92>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <GPIO_setupPinDirection+0x8e>
 1b6:	82 2b       	or	r24, r18
 1b8:	84 bb       	out	0x14, r24	; 20
 1ba:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 1bc:	24 b3       	in	r18, 0x14	; 20
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <GPIO_setupPinDirection+0xa8>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <GPIO_setupPinDirection+0xa4>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	84 bb       	out	0x14, r24	; 20
 1d2:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
 1d8:	21 b3       	in	r18, 0x11	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <GPIO_setupPinDirection+0xc4>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <GPIO_setupPinDirection+0xc0>
 1e8:	82 2b       	or	r24, r18
 1ea:	81 bb       	out	0x11, r24	; 17
 1ec:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 1ee:	21 b3       	in	r18, 0x11	; 17
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <GPIO_setupPinDirection+0xda>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <GPIO_setupPinDirection+0xd6>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	81 bb       	out	0x11, r24	; 17
 204:	08 95       	ret

00000206 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 206:	68 30       	cpi	r22, 0x08	; 8
 208:	08 f0       	brcs	.+2      	; 0x20c <GPIO_writePin+0x6>
 20a:	6f c0       	rjmp	.+222    	; 0x2ea <GPIO_writePin+0xe4>
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	08 f0       	brcs	.+2      	; 0x212 <GPIO_writePin+0xc>
 210:	6c c0       	rjmp	.+216    	; 0x2ea <GPIO_writePin+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	01 f1       	breq	.+64     	; 0x256 <GPIO_writePin+0x50>
 216:	30 f0       	brcs	.+12     	; 0x224 <GPIO_writePin+0x1e>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	b1 f1       	breq	.+108    	; 0x288 <GPIO_writePin+0x82>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f4       	brne	.+2      	; 0x222 <GPIO_writePin+0x1c>
 220:	4c c0       	rjmp	.+152    	; 0x2ba <GPIO_writePin+0xb4>
 222:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	59 f4       	brne	.+22     	; 0x23e <GPIO_writePin+0x38>
			{
				SET_BIT(PORTA,pin_num);
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GPIO_writePin+0x2e>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <GPIO_writePin+0x2a>
 238:	82 2b       	or	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <GPIO_writePin+0x44>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <GPIO_writePin+0x40>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <GPIO_writePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <GPIO_writePin+0x60>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <GPIO_writePin+0x5c>
 26a:	82 2b       	or	r24, r18
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <GPIO_writePin+0x76>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <GPIO_writePin+0x72>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
 286:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	59 f4       	brne	.+22     	; 0x2a2 <GPIO_writePin+0x9c>
			{
				SET_BIT(PORTC,pin_num);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_writePin+0x92>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_writePin+0x8e>
 29c:	82 2b       	or	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21
 2a0:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 2a2:	25 b3       	in	r18, 0x15	; 21
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <GPIO_writePin+0xa8>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <GPIO_writePin+0xa4>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <GPIO_writePin+0xce>
			{
				SET_BIT(PORTD,pin_num);
 2be:	22 b3       	in	r18, 0x12	; 18
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_writePin+0xc4>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_writePin+0xc0>
 2ce:	82 2b       	or	r24, r18
 2d0:	82 bb       	out	0x12, r24	; 18
 2d2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <GPIO_writePin+0xda>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <GPIO_writePin+0xd6>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret

000002ec <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 2ec:	68 30       	cpi	r22, 0x08	; 8
 2ee:	70 f5       	brcc	.+92     	; 0x34c <GPIO_readPin+0x60>
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	70 f5       	brcc	.+92     	; 0x350 <GPIO_readPin+0x64>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	79 f0       	breq	.+30     	; 0x316 <GPIO_readPin+0x2a>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <GPIO_readPin+0x18>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	a9 f0       	breq	.+42     	; 0x328 <GPIO_readPin+0x3c>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	e1 f0       	breq	.+56     	; 0x33a <GPIO_readPin+0x4e>
 302:	28 c0       	rjmp	.+80     	; 0x354 <GPIO_readPin+0x68>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 304:	89 b3       	in	r24, 0x19	; 25
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <GPIO_readPin+0x22>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <GPIO_readPin+0x1e>
 312:	81 70       	andi	r24, 0x01	; 1
 314:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 316:	86 b3       	in	r24, 0x16	; 22
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <GPIO_readPin+0x34>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <GPIO_readPin+0x30>
 324:	81 70       	andi	r24, 0x01	; 1
 326:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 328:	83 b3       	in	r24, 0x13	; 19
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <GPIO_readPin+0x46>
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <GPIO_readPin+0x42>
 336:	81 70       	andi	r24, 0x01	; 1
 338:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 33a:	80 b3       	in	r24, 0x10	; 16
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <GPIO_readPin+0x58>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <GPIO_readPin+0x54>
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	08 95       	ret
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
 356:	08 95       	ret

00000358 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 358:	84 30       	cpi	r24, 0x04	; 4
 35a:	78 f4       	brcc	.+30     	; 0x37a <GPIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	41 f0       	breq	.+16     	; 0x370 <GPIO_setupPortDirection+0x18>
 360:	28 f0       	brcs	.+10     	; 0x36c <GPIO_setupPortDirection+0x14>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	39 f0       	breq	.+14     	; 0x374 <GPIO_setupPortDirection+0x1c>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	39 f0       	breq	.+14     	; 0x378 <GPIO_setupPortDirection+0x20>
 36a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
 36c:	6a bb       	out	0x1a, r22	; 26
			break;
 36e:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
 370:	67 bb       	out	0x17, r22	; 23
			break;
 372:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
 374:	64 bb       	out	0x14, r22	; 20
			break;
 376:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
 378:	61 bb       	out	0x11, r22	; 17
 37a:	08 95       	ret

0000037c <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 37c:	84 30       	cpi	r24, 0x04	; 4
 37e:	78 f4       	brcc	.+30     	; 0x39e <GPIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	41 f0       	breq	.+16     	; 0x394 <GPIO_writePort+0x18>
 384:	28 f0       	brcs	.+10     	; 0x390 <GPIO_writePort+0x14>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	39 f0       	breq	.+14     	; 0x398 <GPIO_writePort+0x1c>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	39 f0       	breq	.+14     	; 0x39c <GPIO_writePort+0x20>
 38e:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
 390:	6b bb       	out	0x1b, r22	; 27
			break;
 392:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
 394:	68 bb       	out	0x18, r22	; 24
			break;
 396:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
 398:	65 bb       	out	0x15, r22	; 21
			break;
 39a:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
 39c:	62 bb       	out	0x12, r22	; 18
 39e:	08 95       	ret

000003a0 <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 3a0:	84 30       	cpi	r24, 0x04	; 4
 3a2:	80 f4       	brcc	.+32     	; 0x3c4 <GPIO_readPort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	41 f0       	breq	.+16     	; 0x3b8 <GPIO_readPort+0x18>
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <GPIO_readPort+0x14>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	39 f0       	breq	.+14     	; 0x3bc <GPIO_readPort+0x1c>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <GPIO_readPort+0x20>
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <GPIO_readPort+0x28>
		{
		case PORTA_ID:
			value = PINA;
 3b4:	89 b3       	in	r24, 0x19	; 25
			break;
 3b6:	08 95       	ret
		case PORTB_ID:
			value = PINB;
 3b8:	86 b3       	in	r24, 0x16	; 22
			break;
 3ba:	08 95       	ret
		case PORTC_ID:
			value = PINC;
 3bc:	83 b3       	in	r24, 0x13	; 19
			break;
 3be:	08 95       	ret
		case PORTD_ID:
			value = PIND;
 3c0:	80 b3       	in	r24, 0x10	; 16
			break;
 3c2:	08 95       	ret
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
	uint8 value = LOGIC_LOW;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
 3c8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
 3ca:	08 95       	ret

000003cc <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
 3ee:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 3f2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 3f6:	30 97       	sbiw	r30, 0x00	; 0
 3f8:	09 f0       	breq	.+2      	; 0x3fc <__vector_5+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 3fa:	09 95       	icall
	}
}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
 41e:	fc 01       	movw	r30, r24
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
 420:	8e 98       	cbi	0x11, 6	; 17

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	8f bd       	out	0x2f, r24	; 47

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
 426:	9e b5       	in	r25, 0x2e	; 46
 428:	98 7f       	andi	r25, 0xF8	; 248
 42a:	20 81       	ld	r18, Z
 42c:	92 2b       	or	r25, r18
 42e:	9e bd       	out	0x2e, r25	; 46
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
 430:	2e b5       	in	r18, 0x2e	; 46
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	30 e4       	ldi	r19, 0x40	; 64
 436:	93 9f       	mul	r25, r19
 438:	c0 01       	movw	r24, r0
 43a:	11 24       	eor	r1, r1
 43c:	92 2f       	mov	r25, r18
 43e:	9f 7b       	andi	r25, 0xBF	; 191
 440:	89 2b       	or	r24, r25
 442:	8e bd       	out	0x2e, r24	; 46

	/* Initial Value for Timer1 */
	TCNT1 = 0;
 444:	1d bc       	out	0x2d, r1	; 45
 446:	1c bc       	out	0x2c, r1	; 44

	/* Initial Value for the input capture register */
	ICR1 = 0;
 448:	17 bc       	out	0x27, r1	; 39
 44a:	16 bc       	out	0x26, r1	; 38

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
 44c:	89 b7       	in	r24, 0x39	; 57
 44e:	80 62       	ori	r24, 0x20	; 32
 450:	89 bf       	out	0x39, r24	; 57
 452:	08 95       	ret

00000454 <Icu_setCallBack>:
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
 454:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 458:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 45c:	08 95       	ret

0000045e <Icu_setEdgeDetectionType>:
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
 45e:	2e b5       	in	r18, 0x2e	; 46
 460:	2f 7b       	andi	r18, 0xBF	; 191
 462:	30 e4       	ldi	r19, 0x40	; 64
 464:	83 9f       	mul	r24, r19
 466:	c0 01       	movw	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	82 2b       	or	r24, r18
 46c:	8e bd       	out	0x2e, r24	; 46
 46e:	08 95       	ret

00000470 <Icu_getInputCaptureValue>:
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
	return ICR1;
 470:	86 b5       	in	r24, 0x26	; 38
 472:	97 b5       	in	r25, 0x27	; 39
}
 474:	08 95       	ret

00000476 <Icu_clearTimerValue>:
/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
	TCNT1 = 0;
 476:	1d bc       	out	0x2d, r1	; 45
 478:	1c bc       	out	0x2c, r1	; 44
 47a:	08 95       	ret

0000047c <Icu_DeInit>:
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
 47c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 47e:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = 0;
 480:	1d bc       	out	0x2d, r1	; 45
 482:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 0;
 484:	17 bc       	out	0x27, r1	; 39
 486:	16 bc       	out	0x26, r1	; 38

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
 488:	89 b7       	in	r24, 0x39	; 57
 48a:	8f 7d       	andi	r24, 0xDF	; 223
 48c:	89 bf       	out	0x39, r24	; 57
 48e:	08 95       	ret

00000490 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
 490:	cf 93       	push	r28
 492:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 4a8:	8f ec       	ldi	r24, 0xCF	; 207
 4aa:	97 e0       	ldi	r25, 0x07	; 7
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_sendCommand+0x1c>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_sendCommand+0x22>
 4b2:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 4be:	8f ec       	ldi	r24, 0xCF	; 207
 4c0:	97 e0       	ldi	r25, 0x07	; 7
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_sendCommand+0x32>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_sendCommand+0x38>
 4c8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
 4ca:	6c 2f       	mov	r22, r28
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 be 01 	call	0x37c	; 0x37c <GPIO_writePort>
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	97 e0       	ldi	r25, 0x07	; 7
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_sendCommand+0x46>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_sendCommand+0x4c>
 4dc:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 4e8:	8f ec       	ldi	r24, 0xCF	; 207
 4ea:	97 e0       	ldi	r25, 0x07	; 7
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_sendCommand+0x5c>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_sendCommand+0x62>
 4f2:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
 516:	6f ef       	ldi	r22, 0xFF	; 255
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 ac 01 	call	0x358	; 0x358 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 51e:	88 e3       	ldi	r24, 0x38	; 56
 520:	0e 94 48 02 	call	0x490	; 0x490 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 524:	8c e0       	ldi	r24, 0x0C	; 12
 526:	0e 94 48 02 	call	0x490	; 0x490 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 48 02 	call	0x490	; 0x490 <LCD_sendCommand>
 530:	08 95       	ret

00000532 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
 532:	cf 93       	push	r28
 534:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 54a:	8f ec       	ldi	r24, 0xCF	; 207
 54c:	97 e0       	ldi	r25, 0x07	; 7
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_displayCharacter+0x1c>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_displayCharacter+0x22>
 554:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 560:	8f ec       	ldi	r24, 0xCF	; 207
 562:	97 e0       	ldi	r25, 0x07	; 7
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <LCD_displayCharacter+0x32>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_displayCharacter+0x38>
 56a:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
 56c:	6c 2f       	mov	r22, r28
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 be 01 	call	0x37c	; 0x37c <GPIO_writePort>
 574:	8f ec       	ldi	r24, 0xCF	; 207
 576:	97 e0       	ldi	r25, 0x07	; 7
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_displayCharacter+0x46>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_displayCharacter+0x4c>
 57e:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 58a:	8f ec       	ldi	r24, 0xCF	; 207
 58c:	97 e0       	ldi	r25, 0x07	; 7
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_displayCharacter+0x5c>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_displayCharacter+0x62>
 594:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	fc 01       	movw	r30, r24
	uint8 i = 0;
	while(Str[i] != '\0')
 5a2:	80 81       	ld	r24, Z
 5a4:	88 23       	and	r24, r24
 5a6:	59 f0       	breq	.+22     	; 0x5be <LCD_displayString+0x24>
 5a8:	8f 01       	movw	r16, r30
 5aa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayCharacter(Str[i]);
 5ac:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayCharacter>
		i++;
 5b0:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 5b2:	f8 01       	movw	r30, r16
 5b4:	ec 0f       	add	r30, r28
 5b6:	f1 1d       	adc	r31, r1
 5b8:	80 81       	ld	r24, Z
 5ba:	81 11       	cpse	r24, r1
 5bc:	f7 cf       	rjmp	.-18     	; 0x5ac <LCD_displayString+0x12>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	41 f0       	breq	.+16     	; 0x5da <LCD_moveCursor+0x14>
 5ca:	28 f0       	brcs	.+10     	; 0x5d6 <LCD_moveCursor+0x10>
 5cc:	82 30       	cpi	r24, 0x02	; 2
 5ce:	41 f0       	breq	.+16     	; 0x5e0 <LCD_moveCursor+0x1a>
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	49 f0       	breq	.+18     	; 0x5e6 <LCD_moveCursor+0x20>
 5d4:	0a c0       	rjmp	.+20     	; 0x5ea <LCD_moveCursor+0x24>
	{
		case 0:
			lcd_memory_address=col;
 5d6:	96 2f       	mov	r25, r22
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <LCD_moveCursor+0x24>
				break;
		case 1:
			lcd_memory_address=col+0x40;
 5da:	90 e4       	ldi	r25, 0x40	; 64
 5dc:	96 0f       	add	r25, r22
				break;
 5de:	05 c0       	rjmp	.+10     	; 0x5ea <LCD_moveCursor+0x24>
		case 2:
			lcd_memory_address=col+0x10;
 5e0:	90 e1       	ldi	r25, 0x10	; 16
 5e2:	96 0f       	add	r25, r22
				break;
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <LCD_moveCursor+0x24>
		case 3:
			lcd_memory_address=col+0x50;
 5e6:	90 e5       	ldi	r25, 0x50	; 80
 5e8:	96 0f       	add	r25, r22
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 5ea:	89 2f       	mov	r24, r25
 5ec:	80 68       	ori	r24, 0x80	; 128
 5ee:	0e 94 48 02 	call	0x490	; 0x490 <LCD_sendCommand>
 5f2:	08 95       	ret

000005f4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
 5fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
 5fe:	ce 01       	movw	r24, r28
 600:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_displayString>
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	60 97       	sbiw	r28, 0x10	; 16
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 61e:	4a e0       	ldi	r20, 0x0A	; 10
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	be 01       	movw	r22, r28
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
   LCD_displayString(buff); /* Display the string */
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_displayString>
}
 634:	60 96       	adiw	r28, 0x10	; 16
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 48 02 	call	0x490	; 0x490 <LCD_sendCommand>
 64c:	08 95       	ret

0000064e <Ultrasonic_edgeProcessing>:
 *
 * [Args]: this function takes void input.
 * [Returns]: this function returns void.
 * ----------------------------------------------------------------------------*/
void Ultrasonic_edgeProcessing(void){
	Signal_edges++;
 64e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Signal_edges>
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Signal_edges>
	if(Signal_edges == 1){
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	31 f4       	brne	.+12     	; 0x668 <Ultrasonic_edgeProcessing+0x1a>
		Icu_clearTimerValue(); /* Clear timer value to start measurements from the first positive edge */
 65c:	0e 94 3b 02 	call	0x476	; 0x476 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 2f 02 	call	0x45e	; 0x45e <Icu_setEdgeDetectionType>
 666:	08 95       	ret
	}

	else if(Signal_edges == 2){
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	49 f4       	brne	.+18     	; 0x67e <Ultrasonic_edgeProcessing+0x30>
		/* storing ICR value */
		Icu_HighTime = Icu_getInputCaptureValue();
 66c:	0e 94 38 02 	call	0x470	; 0x470 <Icu_getInputCaptureValue>
 670:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <Icu_HighTime+0x1>
 674:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Icu_HighTime>
		Icu_setEdgeDetectionType(RISING);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 2f 02 	call	0x45e	; 0x45e <Icu_setEdgeDetectionType>
 67e:	08 95       	ret

00000680 <Ultrasonic_init>:
 * [Returns]: this function returns void.
 * ----------------------------------------------------------------------------*/
void Ultrasonic_init(void){

	/* Setup PB5 as output to trigger ultrasonic. */
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	65 e0       	ldi	r22, 0x05	; 5
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_setupPinDirection>

	/* Setup ICU as specified */
	Icu_init(&Icu_Config);
 68a:	80 e6       	ldi	r24, 0x60	; 96
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 0f 02 	call	0x41e	; 0x41e <Icu_init>

	/* Setup the ICU call back function. */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
 692:	87 e2       	ldi	r24, 0x27	; 39
 694:	93 e0       	ldi	r25, 0x03	; 3
 696:	0e 94 2a 02 	call	0x454	; 0x454 <Icu_setCallBack>
 69a:	08 95       	ret

0000069c <Ultrasonic_Trigger>:
 * [Args]: this function takes void input.
 * [Returns]: this function returns void.
 * ----------------------------------------------------------------------------*/
void Ultrasonic_Trigger(void){

	GPIO_writePin(PORTB_ID,PIN5_ID,LOGIC_HIGH);
 69c:	41 e0       	ldi	r20, 0x01	; 1
 69e:	65 e0       	ldi	r22, 0x05	; 5
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a6:	85 e3       	ldi	r24, 0x35	; 53
 6a8:	8a 95       	dec	r24
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <Ultrasonic_Trigger+0xc>
 6ac:	00 00       	nop
	_delay_us(20);
	GPIO_writePin(PORTB_ID,PIN5_ID,LOGIC_LOW);
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	65 e0       	ldi	r22, 0x05	; 5
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 03 01 	call	0x206	; 0x206 <GPIO_writePin>
 6b8:	08 95       	ret

000006ba <Ultrasonic_readDistance>:
 * [Description]: Send the trigger pulse by using Ultrasonic_Trigger function.
 *				  Start the measurements by the ICU from this moment.
 * [Args]: this function takes void.
 * [Returns]: this function returns 2 bytes number which is the distance measured in centimeters.
 * ----------------------------------------------------------------------------*/
uint16 Ultrasonic_readDistance(void){
 6ba:	cf 92       	push	r12
 6bc:	df 92       	push	r13
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15

	/* Local variable to calculate distance from ICU value*/
	uint16 Ultrasonic_measuredDistance = 0;

	/*  Send the trigger pulse by using Ultrasonic_Trigger function.  */
	Ultrasonic_Trigger();
 6c2:	0e 94 4e 03 	call	0x69c	; 0x69c <Ultrasonic_Trigger>

	/* Calculating the distance */
	if(Signal_edges == 2){
 6c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Signal_edges>
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	61 f5       	brne	.+88     	; 0x726 <Ultrasonic_readDistance+0x6c>
		Ultrasonic_measuredDistance = ceil(Icu_HighTime/58.8);
 6ce:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <Icu_HighTime>
 6d2:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <Icu_HighTime+0x1>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 bf 04 	call	0x97e	; 0x97e <__floatunsisf>
 6de:	23 e3       	ldi	r18, 0x33	; 51
 6e0:	33 e3       	ldi	r19, 0x33	; 51
 6e2:	4b e6       	ldi	r20, 0x6B	; 107
 6e4:	52 e4       	ldi	r21, 0x42	; 66
 6e6:	0e 94 1e 04 	call	0x83c	; 0x83c <__divsf3>
 6ea:	0e 94 07 04 	call	0x80e	; 0x80e <ceil>
		Ultrasonic_measuredDistance = Ultrasonic_measuredDistance + (Ultrasonic_measuredDistance * Error_Percentage);
 6ee:	0e 94 90 04 	call	0x920	; 0x920 <__fixunssfsi>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 bf 04 	call	0x97e	; 0x97e <__floatunsisf>
 6fa:	6b 01       	movw	r12, r22
 6fc:	7c 01       	movw	r14, r24
 6fe:	2d ec       	ldi	r18, 0xCD	; 205
 700:	3c ec       	ldi	r19, 0xCC	; 204
 702:	4c e4       	ldi	r20, 0x4C	; 76
 704:	5c e3       	ldi	r21, 0x3C	; 60
 706:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 70a:	a7 01       	movw	r20, r14
 70c:	96 01       	movw	r18, r12
 70e:	0e 94 9b 03 	call	0x736	; 0x736 <__addsf3>
 712:	0e 94 90 04 	call	0x920	; 0x920 <__fixunssfsi>
 716:	cb 01       	movw	r24, r22
		Signal_edges = 0;
 718:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Signal_edges>
		Icu_HighTime = 0;
 71c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Icu_HighTime+0x1>
 720:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Icu_HighTime>
 724:	02 c0       	rjmp	.+4      	; 0x72a <Ultrasonic_readDistance+0x70>
 * [Returns]: this function returns 2 bytes number which is the distance measured in centimeters.
 * ----------------------------------------------------------------------------*/
uint16 Ultrasonic_readDistance(void){

	/* Local variable to calculate distance from ICU value*/
	uint16 Ultrasonic_measuredDistance = 0;
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
		Signal_edges = 0;
		Icu_HighTime = 0;
	}

	return Ultrasonic_measuredDistance;
}
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	cf 90       	pop	r12
 732:	08 95       	ret

00000734 <__subsf3>:
 734:	50 58       	subi	r21, 0x80	; 128

00000736 <__addsf3>:
 736:	bb 27       	eor	r27, r27
 738:	aa 27       	eor	r26, r26
 73a:	0e 94 b2 03 	call	0x764	; 0x764 <__addsf3x>
 73e:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 742:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 746:	38 f0       	brcs	.+14     	; 0x756 <__addsf3+0x20>
 748:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 74c:	20 f0       	brcs	.+8      	; 0x756 <__addsf3+0x20>
 74e:	39 f4       	brne	.+14     	; 0x75e <__addsf3+0x28>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	19 f4       	brne	.+6      	; 0x75a <__addsf3+0x24>
 754:	26 f4       	brtc	.+8      	; 0x75e <__addsf3+0x28>
 756:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>
 75a:	0e f4       	brtc	.+2      	; 0x75e <__addsf3+0x28>
 75c:	e0 95       	com	r30
 75e:	e7 fb       	bst	r30, 7
 760:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>

00000764 <__addsf3x>:
 764:	e9 2f       	mov	r30, r25
 766:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 76a:	58 f3       	brcs	.-42     	; 0x742 <__addsf3+0xc>
 76c:	ba 17       	cp	r27, r26
 76e:	62 07       	cpc	r22, r18
 770:	73 07       	cpc	r23, r19
 772:	84 07       	cpc	r24, r20
 774:	95 07       	cpc	r25, r21
 776:	20 f0       	brcs	.+8      	; 0x780 <__addsf3x+0x1c>
 778:	79 f4       	brne	.+30     	; 0x798 <__addsf3x+0x34>
 77a:	a6 f5       	brtc	.+104    	; 0x7e4 <__addsf3x+0x80>
 77c:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 780:	0e f4       	brtc	.+2      	; 0x784 <__addsf3x+0x20>
 782:	e0 95       	com	r30
 784:	0b 2e       	mov	r0, r27
 786:	ba 2f       	mov	r27, r26
 788:	a0 2d       	mov	r26, r0
 78a:	0b 01       	movw	r0, r22
 78c:	b9 01       	movw	r22, r18
 78e:	90 01       	movw	r18, r0
 790:	0c 01       	movw	r0, r24
 792:	ca 01       	movw	r24, r20
 794:	a0 01       	movw	r20, r0
 796:	11 24       	eor	r1, r1
 798:	ff 27       	eor	r31, r31
 79a:	59 1b       	sub	r21, r25
 79c:	99 f0       	breq	.+38     	; 0x7c4 <__addsf3x+0x60>
 79e:	59 3f       	cpi	r21, 0xF9	; 249
 7a0:	50 f4       	brcc	.+20     	; 0x7b6 <__addsf3x+0x52>
 7a2:	50 3e       	cpi	r21, 0xE0	; 224
 7a4:	68 f1       	brcs	.+90     	; 0x800 <__addsf3x+0x9c>
 7a6:	1a 16       	cp	r1, r26
 7a8:	f0 40       	sbci	r31, 0x00	; 0
 7aa:	a2 2f       	mov	r26, r18
 7ac:	23 2f       	mov	r18, r19
 7ae:	34 2f       	mov	r19, r20
 7b0:	44 27       	eor	r20, r20
 7b2:	58 5f       	subi	r21, 0xF8	; 248
 7b4:	f3 cf       	rjmp	.-26     	; 0x79c <__addsf3x+0x38>
 7b6:	46 95       	lsr	r20
 7b8:	37 95       	ror	r19
 7ba:	27 95       	ror	r18
 7bc:	a7 95       	ror	r26
 7be:	f0 40       	sbci	r31, 0x00	; 0
 7c0:	53 95       	inc	r21
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__addsf3x+0x52>
 7c4:	7e f4       	brtc	.+30     	; 0x7e4 <__addsf3x+0x80>
 7c6:	1f 16       	cp	r1, r31
 7c8:	ba 0b       	sbc	r27, r26
 7ca:	62 0b       	sbc	r22, r18
 7cc:	73 0b       	sbc	r23, r19
 7ce:	84 0b       	sbc	r24, r20
 7d0:	ba f0       	brmi	.+46     	; 0x800 <__addsf3x+0x9c>
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	a1 f0       	breq	.+40     	; 0x7fe <__addsf3x+0x9a>
 7d6:	ff 0f       	add	r31, r31
 7d8:	bb 1f       	adc	r27, r27
 7da:	66 1f       	adc	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	c2 f7       	brpl	.-16     	; 0x7d2 <__addsf3x+0x6e>
 7e2:	0e c0       	rjmp	.+28     	; 0x800 <__addsf3x+0x9c>
 7e4:	ba 0f       	add	r27, r26
 7e6:	62 1f       	adc	r22, r18
 7e8:	73 1f       	adc	r23, r19
 7ea:	84 1f       	adc	r24, r20
 7ec:	48 f4       	brcc	.+18     	; 0x800 <__addsf3x+0x9c>
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	9e 3f       	cpi	r25, 0xFE	; 254
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__addsf3x+0x9a>
 7fc:	b0 cf       	rjmp	.-160    	; 0x75e <__addsf3+0x28>
 7fe:	93 95       	inc	r25
 800:	88 0f       	add	r24, r24
 802:	08 f0       	brcs	.+2      	; 0x806 <__addsf3x+0xa2>
 804:	99 27       	eor	r25, r25
 806:	ee 0f       	add	r30, r30
 808:	97 95       	ror	r25
 80a:	87 95       	ror	r24
 80c:	08 95       	ret

0000080e <ceil>:
 80e:	0e 94 6f 05 	call	0xade	; 0xade <__fp_trunc>
 812:	90 f0       	brcs	.+36     	; 0x838 <ceil+0x2a>
 814:	9f 37       	cpi	r25, 0x7F	; 127
 816:	48 f4       	brcc	.+18     	; 0x82a <ceil+0x1c>
 818:	91 11       	cpse	r25, r1
 81a:	16 f4       	brtc	.+4      	; 0x820 <ceil+0x12>
 81c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	9f e3       	ldi	r25, 0x3F	; 63
 828:	08 95       	ret
 82a:	26 f0       	brts	.+8      	; 0x834 <ceil+0x26>
 82c:	1b 16       	cp	r1, r27
 82e:	61 1d       	adc	r22, r1
 830:	71 1d       	adc	r23, r1
 832:	81 1d       	adc	r24, r1
 834:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_mintl>
 838:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_mpack>

0000083c <__divsf3>:
 83c:	0e 94 32 04 	call	0x864	; 0x864 <__divsf3x>
 840:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 844:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 848:	58 f0       	brcs	.+22     	; 0x860 <__divsf3+0x24>
 84a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 84e:	40 f0       	brcs	.+16     	; 0x860 <__divsf3+0x24>
 850:	29 f4       	brne	.+10     	; 0x85c <__divsf3+0x20>
 852:	5f 3f       	cpi	r21, 0xFF	; 255
 854:	29 f0       	breq	.+10     	; 0x860 <__divsf3+0x24>
 856:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 85a:	51 11       	cpse	r21, r1
 85c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 860:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>

00000864 <__divsf3x>:
 864:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 868:	68 f3       	brcs	.-38     	; 0x844 <__divsf3+0x8>

0000086a <__divsf3_pse>:
 86a:	99 23       	and	r25, r25
 86c:	b1 f3       	breq	.-20     	; 0x85a <__divsf3+0x1e>
 86e:	55 23       	and	r21, r21
 870:	91 f3       	breq	.-28     	; 0x856 <__divsf3+0x1a>
 872:	95 1b       	sub	r25, r21
 874:	55 0b       	sbc	r21, r21
 876:	bb 27       	eor	r27, r27
 878:	aa 27       	eor	r26, r26
 87a:	62 17       	cp	r22, r18
 87c:	73 07       	cpc	r23, r19
 87e:	84 07       	cpc	r24, r20
 880:	38 f0       	brcs	.+14     	; 0x890 <__divsf3_pse+0x26>
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	44 1f       	adc	r20, r20
 88c:	aa 1f       	adc	r26, r26
 88e:	a9 f3       	breq	.-22     	; 0x87a <__divsf3_pse+0x10>
 890:	35 d0       	rcall	.+106    	; 0x8fc <__divsf3_pse+0x92>
 892:	0e 2e       	mov	r0, r30
 894:	3a f0       	brmi	.+14     	; 0x8a4 <__divsf3_pse+0x3a>
 896:	e0 e8       	ldi	r30, 0x80	; 128
 898:	32 d0       	rcall	.+100    	; 0x8fe <__divsf3_pse+0x94>
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	50 40       	sbci	r21, 0x00	; 0
 89e:	e6 95       	lsr	r30
 8a0:	00 1c       	adc	r0, r0
 8a2:	ca f7       	brpl	.-14     	; 0x896 <__divsf3_pse+0x2c>
 8a4:	2b d0       	rcall	.+86     	; 0x8fc <__divsf3_pse+0x92>
 8a6:	fe 2f       	mov	r31, r30
 8a8:	29 d0       	rcall	.+82     	; 0x8fc <__divsf3_pse+0x92>
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	bb 1f       	adc	r27, r27
 8b2:	26 17       	cp	r18, r22
 8b4:	37 07       	cpc	r19, r23
 8b6:	48 07       	cpc	r20, r24
 8b8:	ab 07       	cpc	r26, r27
 8ba:	b0 e8       	ldi	r27, 0x80	; 128
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__divsf3_pse+0x56>
 8be:	bb 0b       	sbc	r27, r27
 8c0:	80 2d       	mov	r24, r0
 8c2:	bf 01       	movw	r22, r30
 8c4:	ff 27       	eor	r31, r31
 8c6:	93 58       	subi	r25, 0x83	; 131
 8c8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ca:	3a f0       	brmi	.+14     	; 0x8da <__divsf3_pse+0x70>
 8cc:	9e 3f       	cpi	r25, 0xFE	; 254
 8ce:	51 05       	cpc	r21, r1
 8d0:	78 f0       	brcs	.+30     	; 0x8f0 <__divsf3_pse+0x86>
 8d2:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 8d6:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 8da:	5f 3f       	cpi	r21, 0xFF	; 255
 8dc:	e4 f3       	brlt	.-8      	; 0x8d6 <__divsf3_pse+0x6c>
 8de:	98 3e       	cpi	r25, 0xE8	; 232
 8e0:	d4 f3       	brlt	.-12     	; 0x8d6 <__divsf3_pse+0x6c>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b7 95       	ror	r27
 8ea:	f7 95       	ror	r31
 8ec:	9f 5f       	subi	r25, 0xFF	; 255
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__divsf3_pse+0x78>
 8f0:	88 0f       	add	r24, r24
 8f2:	91 1d       	adc	r25, r1
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret
 8fc:	e1 e0       	ldi	r30, 0x01	; 1
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	bb 1f       	adc	r27, r27
 906:	62 17       	cp	r22, r18
 908:	73 07       	cpc	r23, r19
 90a:	84 07       	cpc	r24, r20
 90c:	ba 07       	cpc	r27, r26
 90e:	20 f0       	brcs	.+8      	; 0x918 <__divsf3_pse+0xae>
 910:	62 1b       	sub	r22, r18
 912:	73 0b       	sbc	r23, r19
 914:	84 0b       	sbc	r24, r20
 916:	ba 0b       	sbc	r27, r26
 918:	ee 1f       	adc	r30, r30
 91a:	88 f7       	brcc	.-30     	; 0x8fe <__divsf3_pse+0x94>
 91c:	e0 95       	com	r30
 91e:	08 95       	ret

00000920 <__fixunssfsi>:
 920:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 924:	88 f0       	brcs	.+34     	; 0x948 <__fixunssfsi+0x28>
 926:	9f 57       	subi	r25, 0x7F	; 127
 928:	98 f0       	brcs	.+38     	; 0x950 <__fixunssfsi+0x30>
 92a:	b9 2f       	mov	r27, r25
 92c:	99 27       	eor	r25, r25
 92e:	b7 51       	subi	r27, 0x17	; 23
 930:	b0 f0       	brcs	.+44     	; 0x95e <__fixunssfsi+0x3e>
 932:	e1 f0       	breq	.+56     	; 0x96c <__fixunssfsi+0x4c>
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	1a f0       	brmi	.+6      	; 0x944 <__fixunssfsi+0x24>
 93e:	ba 95       	dec	r27
 940:	c9 f7       	brne	.-14     	; 0x934 <__fixunssfsi+0x14>
 942:	14 c0       	rjmp	.+40     	; 0x96c <__fixunssfsi+0x4c>
 944:	b1 30       	cpi	r27, 0x01	; 1
 946:	91 f0       	breq	.+36     	; 0x96c <__fixunssfsi+0x4c>
 948:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_zero>
 94c:	b1 e0       	ldi	r27, 0x01	; 1
 94e:	08 95       	ret
 950:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 954:	67 2f       	mov	r22, r23
 956:	78 2f       	mov	r23, r24
 958:	88 27       	eor	r24, r24
 95a:	b8 5f       	subi	r27, 0xF8	; 248
 95c:	39 f0       	breq	.+14     	; 0x96c <__fixunssfsi+0x4c>
 95e:	b9 3f       	cpi	r27, 0xF9	; 249
 960:	cc f3       	brlt	.-14     	; 0x954 <__fixunssfsi+0x34>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b3 95       	inc	r27
 96a:	d9 f7       	brne	.-10     	; 0x962 <__fixunssfsi+0x42>
 96c:	3e f4       	brtc	.+14     	; 0x97c <__fixunssfsi+0x5c>
 96e:	90 95       	com	r25
 970:	80 95       	com	r24
 972:	70 95       	com	r23
 974:	61 95       	neg	r22
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	08 95       	ret

0000097e <__floatunsisf>:
 97e:	e8 94       	clt
 980:	09 c0       	rjmp	.+18     	; 0x994 <__floatsisf+0x12>

00000982 <__floatsisf>:
 982:	97 fb       	bst	r25, 7
 984:	3e f4       	brtc	.+14     	; 0x994 <__floatsisf+0x12>
 986:	90 95       	com	r25
 988:	80 95       	com	r24
 98a:	70 95       	com	r23
 98c:	61 95       	neg	r22
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	99 23       	and	r25, r25
 996:	a9 f0       	breq	.+42     	; 0x9c2 <__floatsisf+0x40>
 998:	f9 2f       	mov	r31, r25
 99a:	96 e9       	ldi	r25, 0x96	; 150
 99c:	bb 27       	eor	r27, r27
 99e:	93 95       	inc	r25
 9a0:	f6 95       	lsr	r31
 9a2:	87 95       	ror	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f1 11       	cpse	r31, r1
 9ac:	f8 cf       	rjmp	.-16     	; 0x99e <__floatsisf+0x1c>
 9ae:	fa f4       	brpl	.+62     	; 0x9ee <__floatsisf+0x6c>
 9b0:	bb 0f       	add	r27, r27
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__floatsisf+0x36>
 9b4:	60 ff       	sbrs	r22, 0
 9b6:	1b c0       	rjmp	.+54     	; 0x9ee <__floatsisf+0x6c>
 9b8:	6f 5f       	subi	r22, 0xFF	; 255
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	16 c0       	rjmp	.+44     	; 0x9ee <__floatsisf+0x6c>
 9c2:	88 23       	and	r24, r24
 9c4:	11 f0       	breq	.+4      	; 0x9ca <__floatsisf+0x48>
 9c6:	96 e9       	ldi	r25, 0x96	; 150
 9c8:	11 c0       	rjmp	.+34     	; 0x9ec <__floatsisf+0x6a>
 9ca:	77 23       	and	r23, r23
 9cc:	21 f0       	breq	.+8      	; 0x9d6 <__floatsisf+0x54>
 9ce:	9e e8       	ldi	r25, 0x8E	; 142
 9d0:	87 2f       	mov	r24, r23
 9d2:	76 2f       	mov	r23, r22
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <__floatsisf+0x5e>
 9d6:	66 23       	and	r22, r22
 9d8:	71 f0       	breq	.+28     	; 0x9f6 <__floatsisf+0x74>
 9da:	96 e8       	ldi	r25, 0x86	; 134
 9dc:	86 2f       	mov	r24, r22
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	2a f0       	brmi	.+10     	; 0x9ee <__floatsisf+0x6c>
 9e4:	9a 95       	dec	r25
 9e6:	66 0f       	add	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	da f7       	brpl	.-10     	; 0x9e4 <__floatsisf+0x62>
 9ee:	88 0f       	add	r24, r24
 9f0:	96 95       	lsr	r25
 9f2:	87 95       	ror	r24
 9f4:	97 f9       	bld	r25, 7
 9f6:	08 95       	ret

000009f8 <__fp_inf>:
 9f8:	97 f9       	bld	r25, 7
 9fa:	9f 67       	ori	r25, 0x7F	; 127
 9fc:	80 e8       	ldi	r24, 0x80	; 128
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	08 95       	ret

00000a04 <__fp_mintl>:
 a04:	88 23       	and	r24, r24
 a06:	71 f4       	brne	.+28     	; 0xa24 <__fp_mintl+0x20>
 a08:	77 23       	and	r23, r23
 a0a:	21 f0       	breq	.+8      	; 0xa14 <__fp_mintl+0x10>
 a0c:	98 50       	subi	r25, 0x08	; 8
 a0e:	87 2b       	or	r24, r23
 a10:	76 2f       	mov	r23, r22
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <__fp_mintl+0x1e>
 a14:	66 23       	and	r22, r22
 a16:	11 f4       	brne	.+4      	; 0xa1c <__fp_mintl+0x18>
 a18:	99 27       	eor	r25, r25
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__fp_mintl+0x32>
 a1c:	90 51       	subi	r25, 0x10	; 16
 a1e:	86 2b       	or	r24, r22
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	2a f0       	brmi	.+10     	; 0xa30 <__fp_mintl+0x2c>
 a26:	9a 95       	dec	r25
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	da f7       	brpl	.-10     	; 0xa26 <__fp_mintl+0x22>
 a30:	88 0f       	add	r24, r24
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <__fp_mpack>:
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	31 f0       	breq	.+12     	; 0xa4a <__fp_mpack_finite+0xc>

00000a3e <__fp_mpack_finite>:
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	20 f4       	brcc	.+8      	; 0xa4a <__fp_mpack_finite+0xc>
 a42:	87 95       	ror	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	88 0f       	add	r24, r24
 a4c:	91 1d       	adc	r25, r1
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__fp_nan>:
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	80 ec       	ldi	r24, 0xC0	; 192
 a5a:	08 95       	ret

00000a5c <__fp_pscA>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	16 16       	cp	r1, r22
 a62:	17 06       	cpc	r1, r23
 a64:	18 06       	cpc	r1, r24
 a66:	09 06       	cpc	r0, r25
 a68:	08 95       	ret

00000a6a <__fp_pscB>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	05 06       	cpc	r0, r21
 a76:	08 95       	ret

00000a78 <__fp_round>:
 a78:	09 2e       	mov	r0, r25
 a7a:	03 94       	inc	r0
 a7c:	00 0c       	add	r0, r0
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_round+0xc>
 a80:	88 23       	and	r24, r24
 a82:	52 f0       	brmi	.+20     	; 0xa98 <__fp_round+0x20>
 a84:	bb 0f       	add	r27, r27
 a86:	40 f4       	brcc	.+16     	; 0xa98 <__fp_round+0x20>
 a88:	bf 2b       	or	r27, r31
 a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0x18>
 a8c:	60 ff       	sbrs	r22, 0
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fp_round+0x20>
 a90:	6f 5f       	subi	r22, 0xFF	; 255
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__fp_split3>:
 a9a:	57 fd       	sbrc	r21, 7
 a9c:	90 58       	subi	r25, 0x80	; 128
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	59 f0       	breq	.+22     	; 0xaba <__fp_splitA+0x10>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	71 f0       	breq	.+28     	; 0xac4 <__fp_splitA+0x1a>
 aa8:	47 95       	ror	r20

00000aaa <__fp_splitA>:
 aaa:	88 0f       	add	r24, r24
 aac:	97 fb       	bst	r25, 7
 aae:	99 1f       	adc	r25, r25
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_splitA+0x20>
 ab2:	9f 3f       	cpi	r25, 0xFF	; 255
 ab4:	79 f0       	breq	.+30     	; 0xad4 <__fp_splitA+0x2a>
 ab6:	87 95       	ror	r24
 ab8:	08 95       	ret
 aba:	12 16       	cp	r1, r18
 abc:	13 06       	cpc	r1, r19
 abe:	14 06       	cpc	r1, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <__fp_split3+0xe>
 ac4:	46 95       	lsr	r20
 ac6:	f1 df       	rcall	.-30     	; 0xaaa <__fp_splitA>
 ac8:	08 c0       	rjmp	.+16     	; 0xada <__fp_splitA+0x30>
 aca:	16 16       	cp	r1, r22
 acc:	17 06       	cpc	r1, r23
 ace:	18 06       	cpc	r1, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <__fp_splitA+0xc>
 ad4:	86 95       	lsr	r24
 ad6:	71 05       	cpc	r23, r1
 ad8:	61 05       	cpc	r22, r1
 ada:	08 94       	sec
 adc:	08 95       	ret

00000ade <__fp_trunc>:
 ade:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 ae2:	a0 f0       	brcs	.+40     	; 0xb0c <__fp_trunc+0x2e>
 ae4:	be e7       	ldi	r27, 0x7E	; 126
 ae6:	b9 17       	cp	r27, r25
 ae8:	88 f4       	brcc	.+34     	; 0xb0c <__fp_trunc+0x2e>
 aea:	bb 27       	eor	r27, r27
 aec:	9f 38       	cpi	r25, 0x8F	; 143
 aee:	60 f4       	brcc	.+24     	; 0xb08 <__fp_trunc+0x2a>
 af0:	16 16       	cp	r1, r22
 af2:	b1 1d       	adc	r27, r1
 af4:	67 2f       	mov	r22, r23
 af6:	78 2f       	mov	r23, r24
 af8:	88 27       	eor	r24, r24
 afa:	98 5f       	subi	r25, 0xF8	; 248
 afc:	f7 cf       	rjmp	.-18     	; 0xaec <__fp_trunc+0xe>
 afe:	86 95       	lsr	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b1 1d       	adc	r27, r1
 b06:	93 95       	inc	r25
 b08:	96 39       	cpi	r25, 0x96	; 150
 b0a:	c8 f3       	brcs	.-14     	; 0xafe <__fp_trunc+0x20>
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <__mulsf3>:
 b1c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__mulsf3x>
 b20:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 b24:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 b28:	38 f0       	brcs	.+14     	; 0xb38 <__mulsf3+0x1c>
 b2a:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 b2e:	20 f0       	brcs	.+8      	; 0xb38 <__mulsf3+0x1c>
 b30:	95 23       	and	r25, r21
 b32:	11 f0       	breq	.+4      	; 0xb38 <__mulsf3+0x1c>
 b34:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 b38:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>
 b3c:	11 24       	eor	r1, r1
 b3e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>

00000b42 <__mulsf3x>:
 b42:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 b46:	70 f3       	brcs	.-36     	; 0xb24 <__mulsf3+0x8>

00000b48 <__mulsf3_pse>:
 b48:	95 9f       	mul	r25, r21
 b4a:	c1 f3       	breq	.-16     	; 0xb3c <__mulsf3+0x20>
 b4c:	95 0f       	add	r25, r21
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	55 1f       	adc	r21, r21
 b52:	62 9f       	mul	r22, r18
 b54:	f0 01       	movw	r30, r0
 b56:	72 9f       	mul	r23, r18
 b58:	bb 27       	eor	r27, r27
 b5a:	f0 0d       	add	r31, r0
 b5c:	b1 1d       	adc	r27, r1
 b5e:	63 9f       	mul	r22, r19
 b60:	aa 27       	eor	r26, r26
 b62:	f0 0d       	add	r31, r0
 b64:	b1 1d       	adc	r27, r1
 b66:	aa 1f       	adc	r26, r26
 b68:	64 9f       	mul	r22, r20
 b6a:	66 27       	eor	r22, r22
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	66 1f       	adc	r22, r22
 b72:	82 9f       	mul	r24, r18
 b74:	22 27       	eor	r18, r18
 b76:	b0 0d       	add	r27, r0
 b78:	a1 1d       	adc	r26, r1
 b7a:	62 1f       	adc	r22, r18
 b7c:	73 9f       	mul	r23, r19
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	62 1f       	adc	r22, r18
 b84:	83 9f       	mul	r24, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	22 1f       	adc	r18, r18
 b8c:	74 9f       	mul	r23, r20
 b8e:	33 27       	eor	r19, r19
 b90:	a0 0d       	add	r26, r0
 b92:	61 1d       	adc	r22, r1
 b94:	23 1f       	adc	r18, r19
 b96:	84 9f       	mul	r24, r20
 b98:	60 0d       	add	r22, r0
 b9a:	21 1d       	adc	r18, r1
 b9c:	82 2f       	mov	r24, r18
 b9e:	76 2f       	mov	r23, r22
 ba0:	6a 2f       	mov	r22, r26
 ba2:	11 24       	eor	r1, r1
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	9a f0       	brmi	.+38     	; 0xbd0 <__mulsf3_pse+0x88>
 baa:	f1 f0       	breq	.+60     	; 0xbe8 <__mulsf3_pse+0xa0>
 bac:	88 23       	and	r24, r24
 bae:	4a f0       	brmi	.+18     	; 0xbc2 <__mulsf3_pse+0x7a>
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	bb 1f       	adc	r27, r27
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	91 50       	subi	r25, 0x01	; 1
 bbe:	50 40       	sbci	r21, 0x00	; 0
 bc0:	a9 f7       	brne	.-22     	; 0xbac <__mulsf3_pse+0x64>
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	51 05       	cpc	r21, r1
 bc6:	80 f0       	brcs	.+32     	; 0xbe8 <__mulsf3_pse+0xa0>
 bc8:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 bcc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	e4 f3       	brlt	.-8      	; 0xbcc <__mulsf3_pse+0x84>
 bd4:	98 3e       	cpi	r25, 0xE8	; 232
 bd6:	d4 f3       	brlt	.-12     	; 0xbcc <__mulsf3_pse+0x84>
 bd8:	86 95       	lsr	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f7 95       	ror	r31
 be2:	e7 95       	ror	r30
 be4:	9f 5f       	subi	r25, 0xFF	; 255
 be6:	c1 f7       	brne	.-16     	; 0xbd8 <__mulsf3_pse+0x90>
 be8:	fe 2b       	or	r31, r30
 bea:	88 0f       	add	r24, r24
 bec:	91 1d       	adc	r25, r1
 bee:	96 95       	lsr	r25
 bf0:	87 95       	ror	r24
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret

00000bf6 <itoa>:
 bf6:	45 32       	cpi	r20, 0x25	; 37
 bf8:	51 05       	cpc	r21, r1
 bfa:	20 f4       	brcc	.+8      	; 0xc04 <itoa+0xe>
 bfc:	42 30       	cpi	r20, 0x02	; 2
 bfe:	10 f0       	brcs	.+4      	; 0xc04 <itoa+0xe>
 c00:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__itoa_ncheck>
 c04:	fb 01       	movw	r30, r22
 c06:	10 82       	st	Z, r1
 c08:	cb 01       	movw	r24, r22
 c0a:	08 95       	ret

00000c0c <__itoa_ncheck>:
 c0c:	bb 27       	eor	r27, r27
 c0e:	4a 30       	cpi	r20, 0x0A	; 10
 c10:	31 f4       	brne	.+12     	; 0xc1e <__itoa_ncheck+0x12>
 c12:	99 23       	and	r25, r25
 c14:	22 f4       	brpl	.+8      	; 0xc1e <__itoa_ncheck+0x12>
 c16:	bd e2       	ldi	r27, 0x2D	; 45
 c18:	90 95       	com	r25
 c1a:	81 95       	neg	r24
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__utoa_common>

00000c22 <__utoa_ncheck>:
 c22:	bb 27       	eor	r27, r27

00000c24 <__utoa_common>:
 c24:	fb 01       	movw	r30, r22
 c26:	55 27       	eor	r21, r21
 c28:	aa 27       	eor	r26, r26
 c2a:	88 0f       	add	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	aa 1f       	adc	r26, r26
 c30:	a4 17       	cp	r26, r20
 c32:	10 f0       	brcs	.+4      	; 0xc38 <__utoa_common+0x14>
 c34:	a4 1b       	sub	r26, r20
 c36:	83 95       	inc	r24
 c38:	50 51       	subi	r21, 0x10	; 16
 c3a:	b9 f7       	brne	.-18     	; 0xc2a <__utoa_common+0x6>
 c3c:	a0 5d       	subi	r26, 0xD0	; 208
 c3e:	aa 33       	cpi	r26, 0x3A	; 58
 c40:	08 f0       	brcs	.+2      	; 0xc44 <__utoa_common+0x20>
 c42:	a9 5d       	subi	r26, 0xD9	; 217
 c44:	a1 93       	st	Z+, r26
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	79 f7       	brne	.-34     	; 0xc28 <__utoa_common+0x4>
 c4a:	b1 11       	cpse	r27, r1
 c4c:	b1 93       	st	Z+, r27
 c4e:	11 92       	st	Z+, r1
 c50:	cb 01       	movw	r24, r22
 c52:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <strrev>

00000c56 <strrev>:
 c56:	dc 01       	movw	r26, r24
 c58:	fc 01       	movw	r30, r24
 c5a:	67 2f       	mov	r22, r23
 c5c:	71 91       	ld	r23, Z+
 c5e:	77 23       	and	r23, r23
 c60:	e1 f7       	brne	.-8      	; 0xc5a <strrev+0x4>
 c62:	32 97       	sbiw	r30, 0x02	; 2
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <strrev+0x18>
 c66:	7c 91       	ld	r23, X
 c68:	6d 93       	st	X+, r22
 c6a:	70 83       	st	Z, r23
 c6c:	62 91       	ld	r22, -Z
 c6e:	ae 17       	cp	r26, r30
 c70:	bf 07       	cpc	r27, r31
 c72:	c8 f3       	brcs	.-14     	; 0xc66 <strrev+0x10>
 c74:	08 95       	ret

00000c76 <_exit>:
 c76:	f8 94       	cli

00000c78 <__stop_program>:
 c78:	ff cf       	rjmp	.-2      	; 0xc78 <__stop_program>
